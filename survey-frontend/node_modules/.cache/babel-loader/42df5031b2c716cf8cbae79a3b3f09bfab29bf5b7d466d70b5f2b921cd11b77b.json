{"ast":null,"code":"import { createSlice, current } from '@reduxjs/toolkit';\nimport { castDraft } from 'immer';\n\n/**\r\n * One Tooltip can display multiple TooltipPayloadEntries at a time.\r\n */\n\n/**\r\n * So what happens is that the tooltip payload is decided based on the available data, and the dataKey.\r\n * The dataKey can either be defined on the graphical element (like Line, or Bar)\r\n * or on the tooltip itself.\r\n *\r\n * The data can be defined in the chart element, or in the graphical item.\r\n *\r\n * So this type is all the settings, other than the data + dataKey complications.\r\n */\n\n/**\r\n * This is what Tooltip renders.\r\n */\n\n/**\r\n * null means no active index\r\n * string means: whichever index from the chart data it is.\r\n * Different charts have different requirements on data shapes,\r\n * and are also responsible for providing a function that will accept this index\r\n * and return data.\r\n */\n\n/**\r\n * Different items have different data shapes so the state has no opinion on what the data shape should be;\r\n * the only requirement is that the chart also provides a searcher function\r\n * that accepts the data, and a key, and returns whatever the payload in Tooltip should be.\r\n */\n\n/**\r\n * So this informs the \"tooltip event type\". Tooltip event type can be either \"axis\" or \"item\"\r\n * and it is used for two things:\r\n * 1. Sets the active area\r\n * 2. Sets the background and cursor highlights\r\n *\r\n * Some charts only allow to have one type of tooltip event type, some allow both.\r\n * Those charts that allow both will have one default, and the \"shared\" prop will be used to switch between them.\r\n * Undefined means \"use the chart default\".\r\n *\r\n * Charts that only allow one tooltip event type, will ignore the shared prop.\r\n */\n\n/**\r\n * A generic state for user interaction with the chart.\r\n * User interaction can come through multiple channels: mouse events, keyboard events, or hardcoded in props, or synchronised from other charts.\r\n *\r\n * Each of the interaction states is represented as TooltipInteractionState,\r\n * and then the selectors and Tooltip will decide which of the interaction states to use.\r\n */\n\nexport var noInteraction = {\n  active: false,\n  index: null,\n  dataKey: undefined,\n  coordinate: undefined\n};\n\n/**\r\n * The tooltip interaction state stores:\r\n *\r\n * - Which graphical item is user interacting with at the moment,\r\n * - which axis (or, which part of chart background) is user interacting with at the moment\r\n * - The data that individual graphical items wish to be displayed in case the tooltip gets activated\r\n */\n\nexport var initialState = {\n  itemInteraction: {\n    click: noInteraction,\n    hover: noInteraction\n  },\n  axisInteraction: {\n    click: noInteraction,\n    hover: noInteraction\n  },\n  keyboardInteraction: noInteraction,\n  syncInteraction: {\n    active: false,\n    index: null,\n    dataKey: undefined,\n    label: undefined,\n    coordinate: undefined\n  },\n  tooltipItemPayloads: [],\n  settings: {\n    shared: undefined,\n    trigger: 'hover',\n    axisId: 0,\n    active: false,\n    defaultIndex: undefined\n  }\n};\nvar tooltipSlice = createSlice({\n  name: 'tooltip',\n  initialState,\n  reducers: {\n    addTooltipEntrySettings(state, action) {\n      state.tooltipItemPayloads.push(castDraft(action.payload));\n    },\n    removeTooltipEntrySettings(state, action) {\n      var index = current(state).tooltipItemPayloads.indexOf(castDraft(action.payload));\n      if (index > -1) {\n        state.tooltipItemPayloads.splice(index, 1);\n      }\n    },\n    setTooltipSettingsState(state, action) {\n      state.settings = action.payload;\n    },\n    setActiveMouseOverItemIndex(state, action) {\n      state.syncInteraction.active = false;\n      state.keyboardInteraction.active = false;\n      state.itemInteraction.hover.active = true;\n      state.itemInteraction.hover.index = action.payload.activeIndex;\n      state.itemInteraction.hover.dataKey = action.payload.activeDataKey;\n      state.itemInteraction.hover.coordinate = action.payload.activeCoordinate;\n    },\n    mouseLeaveChart(state) {\n      /*\r\n       * Clear only the active flags. Why?\r\n       * 1. Keep Coordinate to preserve animation - next time the Tooltip appears, we want to render it from\r\n       * the last place where it was when it disappeared.\r\n       * 2. We want to keep all the properties anyway just in case the tooltip has `active=true` prop\r\n       * and continues being visible even after the mouse has left the chart.\r\n       */\n      state.itemInteraction.hover.active = false;\n      state.axisInteraction.hover.active = false;\n    },\n    mouseLeaveItem(state) {\n      state.itemInteraction.hover.active = false;\n    },\n    setActiveClickItemIndex(state, action) {\n      state.syncInteraction.active = false;\n      state.itemInteraction.click.active = true;\n      state.keyboardInteraction.active = false;\n      state.itemInteraction.click.index = action.payload.activeIndex;\n      state.itemInteraction.click.dataKey = action.payload.activeDataKey;\n      state.itemInteraction.click.coordinate = action.payload.activeCoordinate;\n    },\n    setMouseOverAxisIndex(state, action) {\n      state.syncInteraction.active = false;\n      state.axisInteraction.hover.active = true;\n      state.keyboardInteraction.active = false;\n      state.axisInteraction.hover.index = action.payload.activeIndex;\n      state.axisInteraction.hover.dataKey = action.payload.activeDataKey;\n      state.axisInteraction.hover.coordinate = action.payload.activeCoordinate;\n    },\n    setMouseClickAxisIndex(state, action) {\n      state.syncInteraction.active = false;\n      state.keyboardInteraction.active = false;\n      state.axisInteraction.click.active = true;\n      state.axisInteraction.click.index = action.payload.activeIndex;\n      state.axisInteraction.click.dataKey = action.payload.activeDataKey;\n      state.axisInteraction.click.coordinate = action.payload.activeCoordinate;\n    },\n    setSyncInteraction(state, action) {\n      state.syncInteraction = action.payload;\n    },\n    setKeyboardInteraction(state, action) {\n      state.keyboardInteraction.active = action.payload.active;\n      state.keyboardInteraction.index = action.payload.activeIndex;\n      state.keyboardInteraction.coordinate = action.payload.activeCoordinate;\n      state.keyboardInteraction.dataKey = action.payload.activeDataKey;\n    }\n  }\n});\nexport var {\n  addTooltipEntrySettings,\n  removeTooltipEntrySettings,\n  setTooltipSettingsState,\n  setActiveMouseOverItemIndex,\n  mouseLeaveItem,\n  mouseLeaveChart,\n  setActiveClickItemIndex,\n  setMouseOverAxisIndex,\n  setMouseClickAxisIndex,\n  setSyncInteraction,\n  setKeyboardInteraction\n} = tooltipSlice.actions;\nexport var tooltipReducer = tooltipSlice.reducer;","map":{"version":3,"names":["createSlice","current","castDraft","noInteraction","active","index","dataKey","undefined","coordinate","initialState","itemInteraction","click","hover","axisInteraction","keyboardInteraction","syncInteraction","label","tooltipItemPayloads","settings","shared","trigger","axisId","defaultIndex","tooltipSlice","name","reducers","addTooltipEntrySettings","state","action","push","payload","removeTooltipEntrySettings","indexOf","splice","setTooltipSettingsState","setActiveMouseOverItemIndex","activeIndex","activeDataKey","activeCoordinate","mouseLeaveChart","mouseLeaveItem","setActiveClickItemIndex","setMouseOverAxisIndex","setMouseClickAxisIndex","setSyncInteraction","setKeyboardInteraction","actions","tooltipReducer","reducer"],"sources":["E:/programming/SurveyInkServer/SurveyInk/survey-frontend/node_modules/recharts/es6/state/tooltipSlice.js"],"sourcesContent":["import { createSlice, current } from '@reduxjs/toolkit';\r\nimport { castDraft } from 'immer';\r\n\r\n/**\r\n * One Tooltip can display multiple TooltipPayloadEntries at a time.\r\n */\r\n\r\n/**\r\n * So what happens is that the tooltip payload is decided based on the available data, and the dataKey.\r\n * The dataKey can either be defined on the graphical element (like Line, or Bar)\r\n * or on the tooltip itself.\r\n *\r\n * The data can be defined in the chart element, or in the graphical item.\r\n *\r\n * So this type is all the settings, other than the data + dataKey complications.\r\n */\r\n\r\n/**\r\n * This is what Tooltip renders.\r\n */\r\n\r\n/**\r\n * null means no active index\r\n * string means: whichever index from the chart data it is.\r\n * Different charts have different requirements on data shapes,\r\n * and are also responsible for providing a function that will accept this index\r\n * and return data.\r\n */\r\n\r\n/**\r\n * Different items have different data shapes so the state has no opinion on what the data shape should be;\r\n * the only requirement is that the chart also provides a searcher function\r\n * that accepts the data, and a key, and returns whatever the payload in Tooltip should be.\r\n */\r\n\r\n/**\r\n * So this informs the \"tooltip event type\". Tooltip event type can be either \"axis\" or \"item\"\r\n * and it is used for two things:\r\n * 1. Sets the active area\r\n * 2. Sets the background and cursor highlights\r\n *\r\n * Some charts only allow to have one type of tooltip event type, some allow both.\r\n * Those charts that allow both will have one default, and the \"shared\" prop will be used to switch between them.\r\n * Undefined means \"use the chart default\".\r\n *\r\n * Charts that only allow one tooltip event type, will ignore the shared prop.\r\n */\r\n\r\n/**\r\n * A generic state for user interaction with the chart.\r\n * User interaction can come through multiple channels: mouse events, keyboard events, or hardcoded in props, or synchronised from other charts.\r\n *\r\n * Each of the interaction states is represented as TooltipInteractionState,\r\n * and then the selectors and Tooltip will decide which of the interaction states to use.\r\n */\r\n\r\nexport var noInteraction = {\r\n  active: false,\r\n  index: null,\r\n  dataKey: undefined,\r\n  coordinate: undefined\r\n};\r\n\r\n/**\r\n * The tooltip interaction state stores:\r\n *\r\n * - Which graphical item is user interacting with at the moment,\r\n * - which axis (or, which part of chart background) is user interacting with at the moment\r\n * - The data that individual graphical items wish to be displayed in case the tooltip gets activated\r\n */\r\n\r\nexport var initialState = {\r\n  itemInteraction: {\r\n    click: noInteraction,\r\n    hover: noInteraction\r\n  },\r\n  axisInteraction: {\r\n    click: noInteraction,\r\n    hover: noInteraction\r\n  },\r\n  keyboardInteraction: noInteraction,\r\n  syncInteraction: {\r\n    active: false,\r\n    index: null,\r\n    dataKey: undefined,\r\n    label: undefined,\r\n    coordinate: undefined\r\n  },\r\n  tooltipItemPayloads: [],\r\n  settings: {\r\n    shared: undefined,\r\n    trigger: 'hover',\r\n    axisId: 0,\r\n    active: false,\r\n    defaultIndex: undefined\r\n  }\r\n};\r\nvar tooltipSlice = createSlice({\r\n  name: 'tooltip',\r\n  initialState,\r\n  reducers: {\r\n    addTooltipEntrySettings(state, action) {\r\n      state.tooltipItemPayloads.push(castDraft(action.payload));\r\n    },\r\n    removeTooltipEntrySettings(state, action) {\r\n      var index = current(state).tooltipItemPayloads.indexOf(castDraft(action.payload));\r\n      if (index > -1) {\r\n        state.tooltipItemPayloads.splice(index, 1);\r\n      }\r\n    },\r\n    setTooltipSettingsState(state, action) {\r\n      state.settings = action.payload;\r\n    },\r\n    setActiveMouseOverItemIndex(state, action) {\r\n      state.syncInteraction.active = false;\r\n      state.keyboardInteraction.active = false;\r\n      state.itemInteraction.hover.active = true;\r\n      state.itemInteraction.hover.index = action.payload.activeIndex;\r\n      state.itemInteraction.hover.dataKey = action.payload.activeDataKey;\r\n      state.itemInteraction.hover.coordinate = action.payload.activeCoordinate;\r\n    },\r\n    mouseLeaveChart(state) {\r\n      /*\r\n       * Clear only the active flags. Why?\r\n       * 1. Keep Coordinate to preserve animation - next time the Tooltip appears, we want to render it from\r\n       * the last place where it was when it disappeared.\r\n       * 2. We want to keep all the properties anyway just in case the tooltip has `active=true` prop\r\n       * and continues being visible even after the mouse has left the chart.\r\n       */\r\n      state.itemInteraction.hover.active = false;\r\n      state.axisInteraction.hover.active = false;\r\n    },\r\n    mouseLeaveItem(state) {\r\n      state.itemInteraction.hover.active = false;\r\n    },\r\n    setActiveClickItemIndex(state, action) {\r\n      state.syncInteraction.active = false;\r\n      state.itemInteraction.click.active = true;\r\n      state.keyboardInteraction.active = false;\r\n      state.itemInteraction.click.index = action.payload.activeIndex;\r\n      state.itemInteraction.click.dataKey = action.payload.activeDataKey;\r\n      state.itemInteraction.click.coordinate = action.payload.activeCoordinate;\r\n    },\r\n    setMouseOverAxisIndex(state, action) {\r\n      state.syncInteraction.active = false;\r\n      state.axisInteraction.hover.active = true;\r\n      state.keyboardInteraction.active = false;\r\n      state.axisInteraction.hover.index = action.payload.activeIndex;\r\n      state.axisInteraction.hover.dataKey = action.payload.activeDataKey;\r\n      state.axisInteraction.hover.coordinate = action.payload.activeCoordinate;\r\n    },\r\n    setMouseClickAxisIndex(state, action) {\r\n      state.syncInteraction.active = false;\r\n      state.keyboardInteraction.active = false;\r\n      state.axisInteraction.click.active = true;\r\n      state.axisInteraction.click.index = action.payload.activeIndex;\r\n      state.axisInteraction.click.dataKey = action.payload.activeDataKey;\r\n      state.axisInteraction.click.coordinate = action.payload.activeCoordinate;\r\n    },\r\n    setSyncInteraction(state, action) {\r\n      state.syncInteraction = action.payload;\r\n    },\r\n    setKeyboardInteraction(state, action) {\r\n      state.keyboardInteraction.active = action.payload.active;\r\n      state.keyboardInteraction.index = action.payload.activeIndex;\r\n      state.keyboardInteraction.coordinate = action.payload.activeCoordinate;\r\n      state.keyboardInteraction.dataKey = action.payload.activeDataKey;\r\n    }\r\n  }\r\n});\r\nexport var {\r\n  addTooltipEntrySettings,\r\n  removeTooltipEntrySettings,\r\n  setTooltipSettingsState,\r\n  setActiveMouseOverItemIndex,\r\n  mouseLeaveItem,\r\n  mouseLeaveChart,\r\n  setActiveClickItemIndex,\r\n  setMouseOverAxisIndex,\r\n  setMouseClickAxisIndex,\r\n  setSyncInteraction,\r\n  setKeyboardInteraction\r\n} = tooltipSlice.actions;\r\nexport var tooltipReducer = tooltipSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}